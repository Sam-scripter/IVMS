import 'dart:io';
import 'dart:typed_data';
import 'package:flutter/services.dart';
import 'package:open_file/open_file.dart';
import 'package:path_provider/path_provider.dart';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_storage/firebase_storage.dart';

class DepartmentPdfService {
  Future<Uint8List> generateDepartmentPdf(
      String user, String department) async {
    final pdf = pw.Document();

    // Fetch positions, employees, and vehicles from Firestore
    final positions = await _fetchPositions(department);
    final vehicles = await _fetchVehicles(department);

    final coverPage = _buildCoverPage(user, department);
    final employeeTable = _buildEmployeeTable(positions);
    final vehicleTable = _buildVehicleTable(vehicles);

    pdf.addPage(pw.Page(
      build: (pw.Context context) => coverPage,
    ));

    pdf.addPage(pw.MultiPage(
      pageFormat: PdfPageFormat.a4,
      header: (pw.Context context) {
        return pw.Container(
          alignment: pw.Alignment.centerRight,
          margin: const pw.EdgeInsets.only(bottom: 3.0 * PdfPageFormat.mm),
          padding: const pw.EdgeInsets.only(bottom: 3.0 * PdfPageFormat.mm),
          decoration: const pw.BoxDecoration(
            border: pw.Border(
              bottom: pw.BorderSide(width: 0.5, color: PdfColors.grey),
            ),
          ),
          child: pw.Text(
            '$department Report',
            style: pw.TextStyle(fontSize: 12, color: PdfColors.grey),
          ),
        );
      },
      build: (pw.Context context) =>
          [employeeTable, pw.SizedBox(height: 40), vehicleTable],
    ));

    return pdf.save();
  }

  pw.Widget _buildCoverPage(String user, String department) {
    return pw.Container(
      padding: const pw.EdgeInsets.all(30),
      alignment: pw.Alignment.center,
      color: PdfColors.white,
      child: pw.Column(
        mainAxisAlignment: pw.MainAxisAlignment.center,
        children: [
          pw.Text(
            'ACEMETHODS AGENCY',
            style: pw.TextStyle(
              fontWeight: pw.FontWeight.bold,
              fontSize: 32,
              color: PdfColors.black,
            ),
          ),
          pw.SizedBox(height: 20),
          pw.Text(
            'Eldoret, Kenya',
            style: pw.TextStyle(
              fontSize: 20,
              color: PdfColors.black,
            ),
          ),
          pw.SizedBox(height: 40),
          pw.Text(
            '$department Report',
            style: pw.TextStyle(
              fontSize: 25,
              color: PdfColors.blue,
              fontWeight: pw.FontWeight.bold,
            ),
          ),
          pw.SizedBox(height: 20),
          pw.Text(
            'Generated By: $user',
            style: pw.TextStyle(
              fontSize: 15,
              color: PdfColors.grey,
            ),
          ),
          pw.SizedBox(height: 20),
          pw.Text(
            'Date: ${DateTime.now().toString()}',
            style: pw.TextStyle(
              fontSize: 15,
              color: PdfColors.grey,
            ),
          ),
        ],
      ),
    );
  }

  Future<Map<String, List<Map<String, dynamic>>>> _fetchPositions(
      String department) async {
    Map<String, List<Map<String, dynamic>>> positions = {};

    QuerySnapshot querySnapshot = await FirebaseFirestore.instance
        .collection('employees')
        .where('department', isEqualTo: department)
        .get();

    for (var document in querySnapshot.docs) {
      var data = document.data() as Map<String, dynamic>;
      var position = data['position'];

      if (positions.containsKey(position)) {
        positions[position]!.add(data);
      } else {
        positions[position] = [data];
      }
    }

    return positions;
  }

  Future<List<Map<String, dynamic>>> _fetchVehicles(String department) async {
    List<Map<String, dynamic>> vehicles = [];

    QuerySnapshot querySnapshot = await FirebaseFirestore.instance
        .collection('vehicles')
        .where('department', isEqualTo: department)
        .get();

    for (var document in querySnapshot.docs) {
      var data = document.data() as Map<String, dynamic>;
      vehicles.add(data);
    }

    return vehicles;
  }

  pw.Table _buildEmployeeTable(
      Map<String, List<Map<String, dynamic>>> positions) {
    List<pw.TableRow> rows = [];

    rows.add(pw.TableRow(
      decoration: pw.BoxDecoration(color: PdfColors.blueGrey),
      children: <pw.Widget>[
        pw.Padding(
            padding: const pw.EdgeInsets.all(10),
            child: pw.Text('Employee Name',
                textAlign: pw.TextAlign.left,
                style: pw.TextStyle(
                    fontSize: 10.0,
                    color: PdfColors.white,
                    fontWeight: pw.FontWeight.bold))),
        pw.Padding(
            padding: pw.EdgeInsets.all(10),
            child: pw.Text('Position',
                textAlign: pw.TextAlign.left,
                style: pw.TextStyle(
                    fontSize: 10.0,
                    color: PdfColors.white,
                    fontWeight: pw.FontWeight.bold))),
        pw.Padding(
            padding: pw.EdgeInsets.all(10),
            child: pw.Text('Contact',
                textAlign: pw.TextAlign.left,
                style: pw.TextStyle(
                    fontSize: 10.0,
                    color: PdfColors.white,
                    fontWeight: pw.FontWeight.bold))),
        pw.Padding(
            padding: pw.EdgeInsets.all(10),
            child: pw.Text('Date of Hire',
                textAlign: pw.TextAlign.left,
                style: pw.TextStyle(
                    fontSize: 10.0,
                    color: PdfColors.white,
                    fontWeight: pw.FontWeight.bold))),
        pw.Padding(
            padding: pw.EdgeInsets.all(10),
            child: pw.Text('Role',
                textAlign: pw.TextAlign.left,
                style: pw.TextStyle(
                    fontSize: 10.0,
                    color: PdfColors.white,
                    fontWeight: pw.FontWeight.bold))),
      ],
    ));

    positions.forEach((position, employees) {
      for (var employee in employees) {
        rows.add(pw.TableRow(children: <pw.Widget>[
          pw.Padding(
              padding: pw.EdgeInsets.all(10.0),
              child: pw.Text(
                  '${employee['firstName']} ${employee['secondName']}',
                  textAlign: pw.TextAlign.left,
                  style: pw.TextStyle(fontSize: 10))),
          pw.Padding(
              padding: pw.EdgeInsets.all(10.0),
              child: pw.Text(position,
                  textAlign: pw.TextAlign.left,
                  style: pw.TextStyle(fontSize: 10))),
          pw.Padding(
              padding: pw.EdgeInsets.all(10.0),
              child: pw.Text(employee['mobileNumber'] ?? '',
                  textAlign: pw.TextAlign.left,
                  style: pw.TextStyle(fontSize: 10))),
          pw.Padding(
              padding: pw.EdgeInsets.all(10.0),
              child: pw.Text(employee['DOH'] ?? '',
                  textAlign: pw.TextAlign.left,
                  style: pw.TextStyle(fontSize: 10))),
          pw.Padding(
              padding: pw.EdgeInsets.all(10.0),
              child: pw.Text(employee['role'] ?? '',
                  textAlign: pw.TextAlign.left,
                  style: pw.TextStyle(fontSize: 10))),
        ]));
      }
    });

    return pw.Table(
      border: pw.TableBorder.all(color: PdfColor.fromHex('#f0f0f0')),
      columnWidths: const <int, pw.TableColumnWidth>{
        0: pw.FixedColumnWidth(100),
        1: pw.FixedColumnWidth(100),
        2: pw.FixedColumnWidth(100),
        3: pw.FixedColumnWidth(100),
        4: pw.FixedColumnWidth(100),
      },
      children: rows,
    );
  }

  pw.Table _buildVehicleTable(List<Map<String, dynamic>> vehicles) {
    List<pw.TableRow> rows = [];

    rows.add(pw.TableRow(
      decoration: pw.BoxDecoration(color: PdfColors.blueGrey),
      children: <pw.Widget>[
        pw.Padding(
            padding: const pw.EdgeInsets.all(10),
            child: pw.Text('Vehicle Number Plate',
                textAlign: pw.TextAlign.left,
                style: pw.TextStyle(
                    fontSize: 10.0,
                    color: PdfColors.white,
                    fontWeight: pw.FontWeight.bold))),
        pw.Padding(
            padding: pw.EdgeInsets.all(10),
            child: pw.Text('Make and Model',
                textAlign: pw.TextAlign.left,
                style: pw.TextStyle(
                    fontSize: 10.0,
                    color: PdfColors.white,
                    fontWeight: pw.FontWeight.bold))),
        pw.Padding(
            padding: pw.EdgeInsets.all(10),
            child: pw.Text('Fuel Consumption',
                textAlign: pw.TextAlign.left,
                style: pw.TextStyle(
                    fontSize: 10.0,
                    color: PdfColors.white,
                    fontWeight: pw.FontWeight.bold))),
        pw.Padding(
            padding: pw.EdgeInsets.all(10),
            child: pw.Text('Driver',
                textAlign: pw.TextAlign.left,
                style: pw.TextStyle(
                    fontSize: 10.0,
                    color: PdfColors.white,
                    fontWeight: pw.FontWeight.bold))),
        pw.Padding(
            padding: pw.EdgeInsets.all(10),
            child: pw.Text('No of Repairs',
                textAlign: pw.TextAlign.left,
                style: pw.TextStyle(
                    fontSize: 10.0,
                    color: PdfColors.white,
                    fontWeight: pw.FontWeight.bold))),
        pw.Padding(
            padding: pw.EdgeInsets.all(10),
            child: pw.Text('Amount of Fuel Consumed',
                textAlign: pw.TextAlign.left,
                style: pw.TextStyle(
                    fontSize: 10.0,
                    color: PdfColors.white,
                    fontWeight: pw.FontWeight.bold))),
      ],
    ));

    for (var vehicle in vehicles) {
      rows.add(pw.TableRow(children: <pw.Widget>[
        pw.Padding(
            padding: pw.EdgeInsets.all(10.0),
            child: pw.Text(vehicle['licensePlateNumber'] ?? '',
                textAlign: pw.TextAlign.left,
                style: pw.TextStyle(fontSize: 10))),
        pw.Padding(
            padding: pw.EdgeInsets.all(10.0),
            child: pw.Text(vehicle['makeAndModel'] ?? '',
                textAlign: pw.TextAlign.left,
                style: pw.TextStyle(fontSize: 10))),
        pw.Padding(
            padding: pw.EdgeInsets.all(10.0),
            child: pw.Text(vehicle['fuelConsumption'].toStringAsFixed(3) ?? '',
                textAlign: pw.TextAlign.left,
                style: pw.TextStyle(fontSize: 10))),
        pw.Padding(
            padding: pw.EdgeInsets.all(10.0),
            child: pw.Text(vehicle['driver'] ?? '',
                textAlign: pw.TextAlign.left,
                style: pw.TextStyle(fontSize: 10))),
        pw.Padding(
            padding: pw.EdgeInsets.all(10.0),
            child: pw.Text(vehicle['repairs'] ?? '0',
                textAlign: pw.TextAlign.left,
                style: pw.TextStyle(fontSize: 10))),
        pw.Padding(
            padding: pw.EdgeInsets.all(10.0),
            child: pw.Text(vehicle['fuelConsumed']?.toString() ?? '0',
                textAlign: pw.TextAlign.left,
                style: pw.TextStyle(fontSize: 10))),
      ]));
    }

    return pw.Table(
      border: pw.TableBorder.all(color: PdfColor.fromHex('#f0f0f0')),
      columnWidths: const <int, pw.TableColumnWidth>{
        0: pw.FixedColumnWidth(100),
        1: pw.FixedColumnWidth(100),
        2: pw.FixedColumnWidth(100),
        3: pw.FixedColumnWidth(100),
        4: pw.FixedColumnWidth(100),
        5: pw.FixedColumnWidth(100),
      },
      children: rows,
    );
  }

  Future<void> savePdfFile(String fileName, Uint8List byteList) async {
    // Save the PDF file to a temporary directory
    final output = await getTemporaryDirectory();
    var filePath = "${output.path}/$fileName.pdf";
    final file = File(filePath);
    await file.writeAsBytes(byteList);

    // Open the PDF file
    await OpenFile.open(filePath);

    // Get a reference to Firebase Storage
    final storageRef =
        FirebaseStorage.instance.ref().child('reports/$fileName.pdf');

    // Upload the PDF file
    final uploadTask = storageRef.putData(byteList);

    // Wait for the upload to complete
    final snapshot = await uploadTask.whenComplete(() => null);

    // Get the download URL
    final downloadUrl = await snapshot.ref.getDownloadURL();

    // Save the download URL to Firestore
    await FirebaseFirestore.instance.collection('reports').add({
      'fileName': fileName,
      'url': downloadUrl,
      'createdAt': Timestamp.now(),
    });
  }
}
